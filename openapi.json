{
  "openapi": "3.1.0",
  "info": {
    "title": "Student AI Bot",
    "description": "API for Student AI Bot service",
    "version": "1.0.0"
  },
  "paths": {
    "/api/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Register",
        "description": "Register a new user.\n\nArgs:\n    request: Registration request\n\nReturns:\n    User data",
        "operationId": "register_api_auth_register_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login",
        "description": "Authenticate a user and issue an access token.\n\nArgs:\n    response: FastAPI response object for setting cookies\n    request: Login request\n\nReturns:\n    Access token",
        "operationId": "login_api_auth_login_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/login/oauth": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Login Oauth",
        "description": "Authenticate a user using OAuth2 password flow.\nThis endpoint is compatible with OpenAPI's OAuth2 password flow.\n\nArgs:\n    response: FastAPI response object for setting cookies\n    form_data: OAuth2 form data\n\nReturns:\n    Access token",
        "operationId": "login_oauth_api_auth_login_oauth_post",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_login_oauth_api_auth_login_oauth_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Logout",
        "description": "Log out a user by invalidating their session.\n\nArgs:\n    response: FastAPI response object for clearing cookies\n    current_user: Current authenticated user\n\nReturns:\n    Success message",
        "operationId": "logout_api_auth_logout_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/auth/token/refresh": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "Refresh Token",
        "description": "Refresh an access token.\n\nArgs:\n    response: FastAPI response object for setting cookies\n    current_user: Current authenticated user\n\nReturns:\n    New access token",
        "operationId": "refresh_token_api_auth_token_refresh_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/auth/user/me": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Get User Profile",
        "description": "Get the current user's profile.\n\nArgs:\n    current_user: Current authenticated user\n\nReturns:\n    User profile data",
        "operationId": "get_user_profile_api_auth_user_me_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/uploads/file": {
      "post": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload File",
        "description": "Upload and process a file (PDF, text, DOCX, or image).\n\nArgs:\n    background_tasks: FastAPI background tasks\n    file: The file to upload\n    current_user: The authenticated user\n\nReturns:\n    Processing status and document ID",
        "operationId": "upload_file_api_uploads_file_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_upload_file_api_uploads_file_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileUploadResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/uploads/status/{task_id}": {
      "get": {
        "tags": [
          "uploads"
        ],
        "summary": "Get Processing Status",
        "description": "Get the status of a processing task.\n\nArgs:\n    task_id: The ID of the task\n    current_user: The authenticated user\n\nReturns:\n    Current processing status",
        "operationId": "get_processing_status_api_uploads_status__task_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProcessingStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/uploads/youtube": {
      "post": {
        "tags": [
          "uploads"
        ],
        "summary": "Upload Youtube",
        "description": "Process a YouTube video link.\n\nArgs:\n    background_tasks: FastAPI background tasks\n    request: The YouTube upload request\n    current_user: The authenticated user\n\nReturns:\n    Processing status and document ID",
        "operationId": "upload_youtube_api_uploads_youtube_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/YouTubeUploadRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/YouTubeUploadResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/uploads/documents": {
      "get": {
        "tags": [
          "uploads"
        ],
        "summary": "Get User Documents",
        "description": "Get a list of documents uploaded by the current user.\n\nArgs:\n    current_user: The authenticated user\n\nReturns:\n    List of user documents",
        "operationId": "get_user_documents_api_uploads_documents_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/UserDocumentResponse"
                  },
                  "type": "array",
                  "title": "Response Get User Documents Api Uploads Documents Get"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/uploads/task/{task_id}": {
      "delete": {
        "tags": [
          "uploads"
        ],
        "summary": "Terminate Task",
        "description": "Terminate a running task.\n\nArgs:\n    task_id: The ID of the task to terminate\n    current_user: The authenticated user\n\nReturns:\n    Status of the termination request",
        "operationId": "terminate_task_api_uploads_task__task_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "task_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Task Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": true,
                  "title": "Response Terminate Task Api Uploads Task  Task Id  Delete"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/sessions/": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "List Sessions",
        "description": "List active sessions for the current user.\n\nArgs:\n    current_user: The authenticated user\n    limit: Maximum number of sessions to return\n\nReturns:\n    List of active sessions with metadata",
        "operationId": "list_sessions_api_sessions__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 20,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sessions"
        ],
        "summary": "Delete All Sessions",
        "description": "Delete all sessions for the current user.\n\nArgs:\n    current_user: The authenticated user\n\nReturns:\n    Success message with count of deleted sessions",
        "operationId": "delete_all_sessions_api_sessions__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/sessions/{session_id}": {
      "get": {
        "tags": [
          "sessions"
        ],
        "summary": "Get Session",
        "description": "Get details about a specific session.\n\nArgs:\n    session_id: The ID of the session\n    current_user: The authenticated user\n\nReturns:\n    Session details including metadata",
        "operationId": "get_session_api_sessions__session_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sessions"
        ],
        "summary": "Delete Session",
        "description": "Delete a session.\n\nArgs:\n    session_id: The ID of the session to delete\n    current_user: The authenticated user\n\nReturns:\n    Success message",
        "operationId": "delete_session_api_sessions__session_id__delete",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "session_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Session Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/diagnostics/semantic/analyze": {
      "post": {
        "tags": [
          "diagnostics"
        ],
        "summary": "Analyze Semantic Query",
        "description": "Analyze a query using the semantic tools.\nReturns detailed analysis of prompt matching and entity extraction.",
        "operationId": "analyze_semantic_query_api_diagnostics_semantic_analyze_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SemanticTestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/diagnostics/semantic/batch-analyze": {
      "post": {
        "tags": [
          "diagnostics"
        ],
        "summary": "Batch Analyze Semantic Queries",
        "description": "Run batch analysis on multiple queries.\nEvaluates semantic matching performance against expected results.",
        "operationId": "batch_analyze_semantic_queries_api_diagnostics_semantic_batch_analyze_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchSemanticTestRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/diagnostics/semantic/models": {
      "get": {
        "tags": [
          "diagnostics"
        ],
        "summary": "Get Semantic Models Status",
        "description": "Get the current status of semantic analysis models.",
        "operationId": "get_semantic_models_status_api_diagnostics_semantic_models_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/diagnostics/semantic/clear-caches": {
      "post": {
        "tags": [
          "diagnostics"
        ],
        "summary": "Clear Semantic Caches",
        "description": "Clear all semantic caches to free memory.",
        "operationId": "clear_semantic_caches_api_diagnostics_semantic_clear_caches_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/diagnostics/gpu/memory": {
      "get": {
        "tags": [
          "diagnostics"
        ],
        "summary": "Get Gpu Memory",
        "description": "Get current GPU memory usage.",
        "operationId": "get_gpu_memory_api_diagnostics_gpu_memory_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/diagnostics/embeddings/optimal-batches": {
      "get": {
        "tags": [
          "diagnostics"
        ],
        "summary": "Get Optimal Batch Sizes Endpoint",
        "description": "Get optimal batch sizes for embedding models.",
        "operationId": "get_optimal_batch_sizes_endpoint_api_diagnostics_embeddings_optimal_batches_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/diagnostics/performance/benchmark": {
      "post": {
        "tags": [
          "diagnostics"
        ],
        "summary": "Run Performance Benchmark",
        "description": "Run a performance benchmark on key system components.",
        "operationId": "run_performance_benchmark_api_diagnostics_performance_benchmark_post",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/system/status": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get System Status",
        "description": "Get current system status information.\nLimited to admin users.\n\nReturns:\n    Dictionary with system status information",
        "operationId": "get_system_status_api_system_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/system/alerts": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Memory Alerts",
        "description": "Get recent memory alerts.\nLimited to admin users.\n\nArgs:\n    count: Maximum number of alerts to return\n    level: Filter by alert level\n\nReturns:\n    List of memory alerts",
        "operationId": "get_memory_alerts_api_system_alerts_get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "count",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "maximum": 100,
              "minimum": 1,
              "default": 10,
              "title": "Count"
            }
          },
          {
            "name": "level",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "pattern": "^(warning|critical)$"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Level"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/system/action": {
      "post": {
        "tags": [
          "system"
        ],
        "summary": "Perform System Action",
        "description": "Perform a system action like cleanup or reset.\nLimited to admin users.\n\nArgs:\n    action: Action to perform\n    background_tasks: FastAPI background tasks\n    current_user: Current user (must be admin)\n\nReturns:\n    Action result",
        "operationId": "perform_system_action_api_system_action_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SystemAction"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/system/performance/metrics": {
      "get": {
        "tags": [
          "system"
        ],
        "summary": "Get Performance Metrics",
        "description": "Get performance metrics for the application.\nLimited to admin users.\n\nReturns:\n    Dictionary with performance metrics",
        "operationId": "get_performance_metrics_api_system_performance_metrics_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/quizzes/": {
      "get": {
        "tags": [
          "quizzes"
        ],
        "summary": "List Quizzes",
        "description": "List all quizzes for the current user.\nCan filter by topic and limit results.",
        "operationId": "list_quizzes_api_quizzes__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "topic",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Topic"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizListResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/quizzes/{quiz_id}": {
      "get": {
        "tags": [
          "quizzes"
        ],
        "summary": "Get Quiz For Test",
        "description": "Get a specific quiz formatted for testing, with shuffled options.",
        "operationId": "get_quiz_for_test_api_quizzes__quiz_id__get",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "quiz_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Quiz Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizForTestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/quizzes/submit": {
      "post": {
        "tags": [
          "quizzes"
        ],
        "summary": "Submit Quiz Answers",
        "description": "Submit answers for a quiz and get the results.",
        "operationId": "submit_quiz_answers_api_quizzes_submit_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/QuizSubmission"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuizResult"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/chat": {
      "post": {
        "summary": "Chat Endpoint",
        "description": "Process a chat request and return a response.\nUser identity is automatically extracted from the token.",
        "operationId": "chat_endpoint_api_chat_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChatResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/health": {
      "get": {
        "summary": "Health Check",
        "description": "Check the health of the service.\n\nReturns:\n    HealthCheck: Health status",
        "operationId": "health_check_api_health_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthCheck"
                }
              }
            }
          }
        }
      }
    },
    "/api/": {
      "get": {
        "summary": "Root",
        "description": "Root endpoint.\n\nReturns:\n    Simple welcome message",
        "operationId": "root_api__get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        }
      }
    },
    "/api/user/session": {
      "get": {
        "summary": "Get Session Data",
        "description": "Get the current user's session data.\nThis endpoint requires valid authentication.\n\nArgs:\n    request: The request object for accessing cookies\n    current_user: The authenticated user\n\nReturns:\n    Session data including user information",
        "operationId": "get_session_data_api_user_session_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/embeddings/status": {
      "get": {
        "summary": "Embedding Status",
        "description": "Get the status of the embedding service.\n\nReturns:\n    Information about the embedding service configuration and available models",
        "operationId": "embedding_status_api_embeddings_status_get",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "BatchSemanticTestRequest": {
        "properties": {
          "queries": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Queries"
          },
          "expected_types": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expected Types"
          },
          "expected_entities": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Expected Entities"
          },
          "test_name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Test Name",
            "default": "semantic_batch_test"
          }
        },
        "type": "object",
        "required": [
          "queries"
        ],
        "title": "BatchSemanticTestRequest",
        "description": "Request for batch testing of semantic analysis."
      },
      "Body_login_oauth_api_auth_login_oauth_post": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^password$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_login_oauth_api_auth_login_oauth_post"
      },
      "Body_upload_file_api_uploads_file_post": {
        "properties": {
          "file": {
            "type": "string",
            "format": "binary",
            "title": "File"
          }
        },
        "type": "object",
        "required": [
          "file"
        ],
        "title": "Body_upload_file_api_uploads_file_post"
      },
      "ChatRequest": {
        "properties": {
          "utter": {
            "type": "string",
            "title": "Utter"
          },
          "user_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "User Id"
          },
          "context_type": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Context Type",
            "default": "auto"
          },
          "session_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Session Id"
          }
        },
        "type": "object",
        "required": [
          "utter"
        ],
        "title": "ChatRequest",
        "description": "Pydantic model for chat requests."
      },
      "ChatResponse": {
        "properties": {
          "response": {
            "type": "string",
            "title": "Response"
          },
          "action_type": {
            "type": "string",
            "title": "Action Type"
          },
          "metadata": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Metadata"
          },
          "session_id": {
            "type": "string",
            "title": "Session Id"
          }
        },
        "type": "object",
        "required": [
          "response",
          "action_type",
          "session_id"
        ],
        "title": "ChatResponse",
        "description": "Pydantic model for chat responses."
      },
      "FileUploadResponse": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "filename": {
            "type": "string",
            "title": "Filename"
          },
          "chunks_processed": {
            "type": "integer",
            "title": "Chunks Processed"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "filename",
          "chunks_processed",
          "status"
        ],
        "title": "FileUploadResponse",
        "description": "Pydantic model for file upload response."
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HealthCheck": {
        "properties": {
          "status": {
            "type": "string",
            "title": "Status"
          },
          "version": {
            "type": "string",
            "title": "Version"
          },
          "services": {
            "additionalProperties": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "object",
            "title": "Services"
          }
        },
        "type": "object",
        "required": [
          "status",
          "version",
          "services"
        ],
        "title": "HealthCheck",
        "description": "Pydantic model for health check response."
      },
      "LoginRequest": {
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "title": "LoginRequest",
        "description": "Login request model."
      },
      "MessageResponse": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          },
          "status": {
            "type": "string",
            "title": "Status",
            "default": "success"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "MessageResponse",
        "description": "Generic message response."
      },
      "ProcessingStatusResponse": {
        "properties": {
          "task_id": {
            "type": "string",
            "title": "Task Id"
          },
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "current": {
            "type": "integer",
            "title": "Current"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "percentage": {
            "type": "integer",
            "title": "Percentage"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "error": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error"
          },
          "last_updated": {
            "type": "string",
            "format": "date-time",
            "title": "Last Updated"
          }
        },
        "type": "object",
        "required": [
          "task_id",
          "document_id",
          "current",
          "total",
          "percentage",
          "status",
          "last_updated"
        ],
        "title": "ProcessingStatusResponse",
        "description": "Processing status response object."
      },
      "QuizForTestResponse": {
        "properties": {
          "id": {
            "type": "integer",
            "title": "Id"
          },
          "topic_name": {
            "type": "string",
            "title": "Topic Name"
          },
          "questions": {
            "items": {
              "$ref": "#/components/schemas/QuizQuestionForTest"
            },
            "type": "array",
            "title": "Questions"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "id",
          "topic_name",
          "questions",
          "created_at"
        ],
        "title": "QuizForTestResponse",
        "description": "Pydantic model for a quiz formatted for testing."
      },
      "QuizListResponse": {
        "properties": {
          "quizzes": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Quizzes"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          }
        },
        "type": "object",
        "required": [
          "quizzes",
          "total"
        ],
        "title": "QuizListResponse",
        "description": "Pydantic model for listing available quizzes."
      },
      "QuizQuestionForTest": {
        "properties": {
          "question": {
            "type": "string",
            "title": "Question"
          },
          "options": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Options"
          },
          "question_id": {
            "type": "integer",
            "title": "Question Id"
          }
        },
        "type": "object",
        "required": [
          "question",
          "options",
          "question_id"
        ],
        "title": "QuizQuestionForTest",
        "description": "Pydantic model for quiz questions with shuffled options."
      },
      "QuizResult": {
        "properties": {
          "quiz_id": {
            "type": "integer",
            "title": "Quiz Id"
          },
          "topic_name": {
            "type": "string",
            "title": "Topic Name"
          },
          "score": {
            "type": "number",
            "title": "Score"
          },
          "correct_count": {
            "type": "integer",
            "title": "Correct Count"
          },
          "total_questions": {
            "type": "integer",
            "title": "Total Questions"
          },
          "questions_with_answers": {
            "items": {
              "additionalProperties": true,
              "type": "object"
            },
            "type": "array",
            "title": "Questions With Answers"
          }
        },
        "type": "object",
        "required": [
          "quiz_id",
          "topic_name",
          "score",
          "correct_count",
          "total_questions",
          "questions_with_answers"
        ],
        "title": "QuizResult",
        "description": "Pydantic model for quiz results."
      },
      "QuizSubmission": {
        "properties": {
          "quiz_id": {
            "type": "integer",
            "title": "Quiz Id"
          },
          "answers": {
            "additionalProperties": {
              "type": "integer"
            },
            "type": "object",
            "title": "Answers"
          }
        },
        "type": "object",
        "required": [
          "quiz_id",
          "answers"
        ],
        "title": "QuizSubmission",
        "description": "Pydantic model for quiz answer submission."
      },
      "RegisterRequest": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "title": "RegisterRequest",
        "description": "Registration request model."
      },
      "SemanticTestRequest": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          }
        },
        "type": "object",
        "required": [
          "query"
        ],
        "title": "SemanticTestRequest",
        "description": "Request for testing semantic analysis on a query."
      },
      "SessionListResponse": {
        "properties": {
          "sessions": {
            "items": {
              "$ref": "#/components/schemas/SessionMetadataResponse"
            },
            "type": "array",
            "title": "Sessions"
          },
          "total": {
            "type": "integer",
            "title": "Total"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "sessions",
          "total",
          "user_id"
        ],
        "title": "SessionListResponse",
        "description": "Pydantic model for list of sessions."
      },
      "SessionMetadataResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated"
          },
          "messages_count": {
            "type": "integer",
            "title": "Messages Count",
            "default": 0
          },
          "ttl_seconds": {
            "type": "integer",
            "title": "Ttl Seconds",
            "default": -1
          }
        },
        "type": "object",
        "required": [
          "session_id"
        ],
        "title": "SessionMetadataResponse",
        "description": "Pydantic model for session metadata."
      },
      "SessionResponse": {
        "properties": {
          "session_id": {
            "type": "string",
            "title": "Session Id"
          },
          "last_updated": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Last Updated"
          },
          "messages_count": {
            "type": "integer",
            "title": "Messages Count",
            "default": 0
          },
          "ttl_seconds": {
            "type": "integer",
            "title": "Ttl Seconds",
            "default": -1
          },
          "recent_messages": {
            "anyOf": [
              {
                "items": {
                  "additionalProperties": true,
                  "type": "object"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Recent Messages"
          },
          "user_id": {
            "type": "string",
            "title": "User Id"
          }
        },
        "type": "object",
        "required": [
          "session_id",
          "user_id"
        ],
        "title": "SessionResponse",
        "description": "Pydantic model for detailed session information."
      },
      "SystemAction": {
        "properties": {
          "action": {
            "type": "string",
            "title": "Action"
          },
          "parameters": {
            "anyOf": [
              {
                "additionalProperties": true,
                "type": "object"
              },
              {
                "type": "null"
              }
            ],
            "title": "Parameters"
          }
        },
        "type": "object",
        "required": [
          "action"
        ],
        "title": "SystemAction",
        "description": "Request model for system actions."
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": [
          "access_token"
        ],
        "title": "Token",
        "description": "Pydantic model for authentication token."
      },
      "UserDocumentResponse": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "source_type": {
            "type": "string",
            "title": "Source Type"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          },
          "title": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Title"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "source_type",
          "created_at"
        ],
        "title": "UserDocumentResponse",
        "description": "Pydantic model for user document list response."
      },
      "UserResponse": {
        "properties": {
          "username": {
            "type": "string",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "id": {
            "type": "string",
            "title": "Id"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "title": "Created At"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "id",
          "created_at"
        ],
        "title": "UserResponse",
        "description": "Pydantic model for User response."
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "YouTubeUploadRequest": {
        "properties": {
          "url": {
            "type": "string",
            "maxLength": 2083,
            "minLength": 1,
            "format": "uri",
            "title": "Url"
          }
        },
        "type": "object",
        "required": [
          "url"
        ],
        "title": "YouTubeUploadRequest",
        "description": "Pydantic model for YouTube video upload request."
      },
      "YouTubeUploadResponse": {
        "properties": {
          "document_id": {
            "type": "string",
            "title": "Document Id"
          },
          "video_id": {
            "type": "string",
            "title": "Video Id"
          },
          "title": {
            "type": "string",
            "title": "Title"
          },
          "chunks_processed": {
            "type": "integer",
            "title": "Chunks Processed"
          },
          "status": {
            "type": "string",
            "title": "Status"
          },
          "message": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Message"
          },
          "task_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Task Id"
          }
        },
        "type": "object",
        "required": [
          "document_id",
          "video_id",
          "title",
          "chunks_processed",
          "status"
        ],
        "title": "YouTubeUploadResponse",
        "description": "Pydantic model for YouTube video upload response."
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/auth/login/oauth"
          }
        }
      }
    }
  }
}